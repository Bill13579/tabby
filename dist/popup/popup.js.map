{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/popup/domutils.js","webpack:///./src/popup/event-listeners/archive.js","webpack:///./src/popup/event-listeners/document.js","webpack:///./src/popup/event-listeners/message.js","webpack:///./src/popup/event-listeners/search.js","webpack:///./src/popup/event-listeners/windowEntry.js","webpack:///./src/popup/globals.js","webpack:///./src/popup/keyutils.js","webpack:///./src/popup/messaging.js","webpack:///./src/popup/net.js","webpack:///./src/popup/popup.js","webpack:///./src/popup/wrong-to-right.js","webpack:///./src/popup/wtdom.js","webpack:///./src/popup/wtinit.js","webpack:///./src/popup/wtutils.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AACO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACmB;AACF;;AAE3C;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;AACA,IAAI,gDAAC;AACL;;AAEO;AACP;AACA,QAAQ,+DAAgB;AACxB,YAAY,iEAAc;AAC1B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,iCAAiC;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,+BAA+B;AACrG,8CAA8C,0BAA0B;AACxE,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACa;AACM;AACmD;;AAEzF;AACP;AACA;AACA,gBAAgB,2DAAS,MAAM,gDAAC;AAChC,gBAAgB,0DAAW;AAC3B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEO;AACP,QAAQ,gDAAC,yBAAyB,kEAAmB;AACrD;;AAEO;AACP;AACA;AACA,gBAAgB,2DAAS;AACzB,gBAAgB,gEAAiB;AACjC,aAAa;AACb;AACA,8CAA8C,+DAAgB;AAC9D;AACA;AACA,iBAAiB;AACjB;AACA,oBAAoB,iEAAgB;AACpC;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEO;AACP,QAAQ,gDAAC;AACT,QAAQ,gDAAC;AACT;AACA;;;;;;;;;;;;;ACjHA;AAAA;AAAA;AAAA;AAAA;AAAoB;AACa;AACyE;;AAEnG;AACP;AACA;AACA,YAAY,2DAAY;AACxB;AACA;AACA;AACA;AACA;AACA,qCAAqC,qDAAQ;AAC7C,iBAAiB;AACjB,qCAAqC,qDAAQ;AAC7C;AACA;AACA,oBAAoB,qEAAsB,CAAC,+DAAgB;AAC3D,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,2BAA2B,+DAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,YAAY,+DAAgB;AAC5B;AACA;AACA;AACA,gBAAgB,wDAAS;AACzB;AACA;AACA;AACA,YAAY,2DAAY;AACxB;AACA;AACA;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACa;AACmD;;AAE1F;;AAEO;AACP;AACA,YAAY,2DAAS;AACrB,YAAY,0DAAW;AACvB,YAAY,gDAAC;AACb;AACA,SAAS;AACT;AACA,2BAA2B,+DAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,kBAAkB,gDAAC;AACnB;AACA;AACA;AACA,uBAAuB,gDAAC;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2DAAY;AACxB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA;AACA,kBAAkB,gDAAC;AACnB;AACA;AACA;AACA,uBAAuB,gDAAC;AACxB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2DAAY;AACxB,+CAA+C,+DAAgB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,gBAAgB,sDAAO;AACvB,aAAa;AACb,gBAAgB,wDAAS;AACzB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,YAAY,sDAAO;AACnB;AACA;AACA;;;;;;;;;;;;;ACzHA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,sEAAO,EAAC;;;;;;;;;;;;;ACVvB;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,cAAc;AAC/E;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mDAAmD;AACjF;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyB;AACyB;AACS;AACuD;AAC1B;AAC5B;AACP;;AAErD,gDAAC;;AAED;AACA;AACA,IAAI,8DAAc;AAClB;AACA,UAAU,uEAAe;AACzB;AACA,IAAI,gEAAgB;AACpB;;AAEA;;AAEA;AACA;AACA;AACA,CAAC;AACD;AACA;;AAEA,uCAAuC,2EAAiB;AACxD,qCAAqC,yEAAe;AACpD,mCAAmC,yEAAe;AAClD,sCAAsC,0EAAgB;;AAEtD;AACA;AACA,iCAAiC,yEAAiB;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA,gDAAC;AACD,gDAAC,sCAAsC,gFAAuB;AAC9D,gDAAC,kCAAkC,4EAAmB;;AAEtD;AACA,2CAA2C,kEAAS;AACpD,0CAA0C,kEAAS;AACnD;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAgD;;AAEhD;;AAEO;AACP,WAAW,qEAAkB,yBAAyB;AACtD;AACA,KAAK;AACL;;AAEA;AACO;AACP;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyB;AACyB;;AAE3C;AACP;AACA;;AAEA;AACO;AACP;AACA;;AAEA;AACO;AACP,4BAA4B,uEAAe;AAC3C;;AAEA;AACO;AACP;AACA;;AAEA;AACO;AACP,WAAW,gDAAC;AACZ;;AAEA;AACO;AACP;AACA;;AAEA;AACO;AACP;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACO;AACP;AACA;AACA,iCAAiC;AACjC;AACA,KAAK;AACL;;AAEO;AACP;AACA;;AAEA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA;AACA,QAAQ,gDAAC;AACT;AACA;AACA;AACA;AACO;AACP;AACA;AACA,YAAY,gDAAC;AACb;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACO;AACP,IAAI,gDAAC;AACL,IAAI,gDAAC;AACL,IAAI,gDAAC;AACL;;;;;;;;;;;;;ACpJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyB;AACO;AACkB;AACZ;AACM;AACwB;AAC+C;;AAEnH;AACO;AACP,IAAI,gDAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA,kDAAkD,mFAAsB;AACxE,iDAAiD,oFAAuB;AACxE,6CAA6C,+EAAkB;AAC/D;;AAEA;AACA,kDAAkD,iFAAwB;;AAE1E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,qDAAQ;AACjD,qBAAqB;AACrB,yCAAyC,qDAAQ;AACjD;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,qDAAqD,uEAAe;AACpE;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI,gDAAC;AACL;AACA,uCAAuC,qBAAqB;AAC5D;;AAEA;AACO;AACP,IAAI,2DAAU;AACd;AACA,KAAK;AACL;;AAEA;AACO;AACP;AACA,2BAA2B,iEAAe;AAC1C;AACA;AACA;;;;;;;;;;;;;AC7MA;AAAA;AAAA;AAAA;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACO;AACP,4CAA4C;AAC5C","file":"popup/popup.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/popup/popup.js\");\n","// Toggle a class of an element\nexport function toggleClass(element, c) {\n    if (element.classList.contains(c)) {\n        element.classList.remove(c);\n    } else {\n        element.classList.add(c);\n    }\n}\n\n// Get actual height of an element\nexport function getActualHeight(element) {\n    var styles = window.getComputedStyle(element);\n    var margin = parseFloat(styles['marginTop']) +\n               parseFloat(styles['marginBottom']);\n    return element.offsetHeight + margin;\n}\n\n// getElementByClassName\nElement.prototype.getElementByClassName = function (classNames) {\n    return this.getElementsByClassName(classNames)[0] || null;\n};\n","import G from \"../globals\"\nimport { sendTabMessage } from \"../messaging\"\nimport { getTabByTabEntry } from \"../wtdom\"\n\nlet archiveTarget;\n\nexport function archiveDragStartReceiver(e) {\n    archiveTarget = e.target;\n    e.dataTransfer.effectAllowed = \"move\";\n}\n\nexport function archiveDragOverReceiver(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = \"move\";\n    G.archive.classList.add(\"saving-for-later\");\n}\n\nexport function archiveDropReceiver(e) {\n    if (archiveTarget.classList.contains(\"tab-entry\")) {\n        getTabByTabEntry(archiveTarget).then(tab => {\n            sendTabMessage(parseInt(archiveTarget.getAttribute(\"data-tab_id\")), \"packd\", {\n                action: \"pack\"\n            }).then(response => {\n                browser.storage.sync.get([\"archive\"], data => {\n                    if (!data.archive) {\n                        data.archive = {};\n                        data.archive.default = [];\n                    }\n                    let repeat;\n                    for (let i = 0; i < data.archive.default.length; i++) {\n                        if (data.archive.default[i].url === tab.url) {\n                            repeat = i;\n                            break;\n                        }\n                    }\n                    let scroll = {\n                        top: response.top,\n                        left: response.left\n                    };\n                    repeat === undefined ? data.archive.default.push({ url: tab.url, scroll: scroll }) : data.archive.default[repeat].scroll = scroll;\n                    browser.storage.sync.set({ \"archive\": data.archive });\n                });\n            });\n        });\n    }\n}\n","import G from \"../globals\"\nimport { ctrlOrCmd } from \"../keyutils\"\nimport { getCurrentWindow } from \"../wtutils\"\nimport { getWindowFromTab, multiSelect, multiSelectToggle, resetSlideSelection } from \"../wtdom\"\n\nexport function documentMouseOver(e) {\n    if (e.button === 0) {\n        if (e.target.classList.contains(\"tab-entry\")) {\n            if (ctrlOrCmd() && G.slideSelection.sliding) {\n                multiSelect(e.target);\n            } else {\n                let tabId = parseInt(e.target.getAttribute(\"data-tab_id\"));\n                browser.tabs.captureTab(tabId).then(dataUri => {\n                    let detailsImage = document.getElementById(\"details-img\");\n                    detailsImage.src = dataUri;\n                    let detailsTitle = document.getElementById(\"details-title\");\n                    let detailsURL = document.getElementById(\"details-url\");\n                    browser.tabs.get(tabId).then(tab => {\n                        detailsTitle.textContent = tab.title;\n                        detailsURL.textContent = tab.url;\n                        document.getElementById(\"details-placeholder\").style.display = \"none\";\n                        document.getElementById(\"tab-details\").style.display = \"inline-block\";\n                        document.getElementById(\"tab-details\").setAttribute(\"data-tab_id\", tabId);\n                        if (tab.pinned) {\n                            document.getElementById(\"details-pinned\").style.display = \"inline\";\n                        } else {\n                            document.getElementById(\"details-pinned\").style.display = \"none\";\n                        }\n                        if (tab.hidden) {\n                            document.getElementById(\"details-hidden\").style.display = \"inline\";\n                        } else {\n                            document.getElementById(\"details-hidden\").style.display = \"none\";\n                        }\n                        if (tab.pinned && tab.hidden) {\n                            document.getElementById(\"details-comma\").style.display = \"inline\";\n                        } else {\n                            document.getElementById(\"details-comma\").style.display = \"none\";\n                        }\n                    });\n                });\n            }\n        }\n    }\n    e.preventDefault();\n}\n\nexport function documentMouseUp(e) {\n    if (G.slideSelection.sliding) resetSlideSelection();\n}\n\nexport function documentClicked(e) {\n    if (e.button === 0) {\n        if (e.target.classList.contains(\"tab-entry\")) {\n            if (ctrlOrCmd()) {\n                multiSelectToggle(e.target);\n            } else {\n                let tabId = parseInt(e.target.getAttribute(\"data-tab_id\"));\n                let parentWindowId = parseInt(getWindowFromTab(e.target).getAttribute(\"data-window_id\"));\n                browser.tabs.update(tabId, {\n                    active: true\n                });\n                browser.windows.get(parentWindowId).then(w => {\n                    getCurrentWindow().then(cw => {\n                        if (w.id !== cw.id) {\n                            browser.windows.update(w.id, {\n                                focused: true\n                            });\n                        }\n                        window.close();\n                    });\n                });\n            }\n        } else if (e.target.parentElement.classList.contains(\"window-entry\")) {\n            let windowId = parseInt(e.target.parentElement.getAttribute(\"data-window_id\"));\n            browser.windows.update(windowId, {\n                focused: true\n            });\n        } else if (e.target.id === \"details-close\") {\n            document.getElementById(\"details-placeholder\").style.display = \"inline-block\";\n            document.getElementById(\"tab-details\").style.display = \"none\";\n            browser.tabs.remove(parseInt(document.getElementById(\"tab-details\").getAttribute(\"data-tab_id\")));\n        } else if (e.target.classList.contains(\"tab-entry-remove-btn\")) {\n            let tabId = e.target.parentElement.parentElement.getAttribute(\"data-tab_id\");\n            let tabDetails = document.getElementById(\"tab-details\");\n            if (tabDetails.getAttribute(\"data-tab_id\") === tabId) {\n                tabDetails.style.display = \"none\";\n                document.getElementById(\"details-placeholder\").style.display = \"inline-block\";\n            }\n            browser.tabs.remove(parseInt(tabId));\n        } else if (e.target.classList.contains(\"tab-entry-pin-btn\")) {\n            let tabId = e.target.parentElement.parentElement.getAttribute(\"data-tab_id\");\n            browser.tabs.get(parseInt(tabId)).then(tab => {\n                if (tab.pinned) {\n                    browser.tabs.update(parseInt(tabId), {\n                        pinned: false\n                    });\n                } else {\n                    browser.tabs.update(parseInt(tabId), {\n                        pinned: true\n                    });\n                }\n            });\n        } else if (e.target.classList.contains(\"window-entry-remove-btn\")) {\n            let windowId = e.target.parentElement.parentElement.parentElement.getAttribute(\"data-window_id\");\n            browser.windows.remove(parseInt(windowId));\n        }\n    }\n}\n\nexport function documentDragOver(e) {\n    if (G.archive.classList.contains(\"saving-for-later\")) {\n        G.archive.classList.remove(\"saving-for-later\");\n    }\n}\n","import \"../domutils\"\nimport { getImage } from \"../net\"\nimport { findTabEntryById, getFavIconFromTabEntry, setActiveTab, removeTab, removeWindow } from \"../wtdom\"\n\nexport function onMessage(request, sender) {\n    switch (request.type) {\n        case \"ACTIVE_TAB_CHANGED\":\n            setActiveTab(request.details.windowId, request.details.tabId);\n            break;\n        case \"TAB_FAV_ICON_CHANGED\":\n            browser.tabs.get(request.details.tabId).then(tab => {\n                let favIconPromise;\n                if (tab.incognito) {\n                    favIconPromise = getImage(request.details.favIconUrl, true);\n                } else {\n                    favIconPromise = getImage(request.details.favIconUrl);\n                }\n                favIconPromise.then(function (base64Image){\n                    getFavIconFromTabEntry(findTabEntryById(request.details.tabId)).src = base64Image;\n                });\n            });\n            break;\n        case \"TAB_PINNED_STATUS_CHANGED\":\n            let tabEntry = findTabEntryById(request.details.tabId);\n            let pinBtn = tabEntry.getElementByClassName(\"tab-entry-pin-btn\");\n            let windowEntryList = tabEntry.parentElement;\n            let pinnedTabs;\n            if (request.details.pinned) {\n                pinnedTabs = windowEntryList.getElementsByClassName(\"pinned-tab\");\n                tabEntry.classList.add(\"pinned-tab\");\n                pinBtn.style.backgroundImage = \"url(../icons/pinremove.svg)\";\n            } else {\n                pinnedTabs = windowEntryList.getElementsByClassName(\"pinned-tab\");\n                tabEntry.classList.remove(\"pinned-tab\");\n                pinBtn.style.backgroundImage = \"url(../icons/pin.svg)\";\n            }\n            let lastPinnedTab = pinnedTabs[pinnedTabs.length-1];\n            if (lastPinnedTab !== undefined) {\n                windowEntryList.insertBefore(tabEntry, lastPinnedTab.nextSibling);\n            } else {\n                windowEntryList.insertBefore(tabEntry, windowEntryList.childNodes[0]);\n            }\n            break;\n        case \"TAB_TITLE_CHANGED\":\n            findTabEntryById(request.details.tabId).getElementByClassName(\"tab-title\").textContent = request.details.title;\n            break;\n        case \"TAB_REMOVED\":\n            if (!request.details.windowClosing) {\n                removeTab(request.details.tabId, request.details.windowId);\n            }\n            break;\n        case \"WINDOW_REMOVED\":\n            removeWindow(request.details.windowId);\n            break;\n    }\n}\n","// Search\nexport function searchTextChanged(e) {\n    let input, filter, tabEntries;\n    input = document.getElementById(\"search\");\n    filter = input.value.toUpperCase();\n    tabEntries = document.getElementsByClassName(\"tab-entry\");\n    if (filter !== \"\") {\n        for (let tabEntry of tabEntries) {\n            if (!tabEntry.getElementByClassName(\"tab-title\").innerText.toUpperCase().includes(filter)) {\n                tabEntry.style.display = \"none\";\n            } else {\n                tabEntry.style.display = \"flex\";\n            }\n        }\n    } else {\n        for (let tabEntry of tabEntries) {\n            tabEntry.style.display = \"flex\";\n        }\n    }\n}\n","import G from \"../globals\"\nimport { ctrlOrCmd } from \"../keyutils\"\nimport { moveTab, attachTab, getWindowFromTab, tabDraggable, multiSelect } from \"../wtdom\"\n\nlet sourceTab, targetTab, under, sourceWindow, sourceWindowId;\n\nexport function windowEntryDragStarted(e) {\n    if (e.target.classList.contains(\"tab-entry\")) {\n        if (ctrlOrCmd()) {\n            multiSelect(e.target);\n            G.slideSelection.sliding = true;\n            e.preventDefault();\n        } else {\n            sourceTab = e.target;\n            sourceWindow = getWindowFromTab(sourceTab);\n            sourceWindowId = parseInt(sourceWindow.getAttribute(\"data-window_id\"));\n            e.dataTransfer.effectAllowed = \"move\";\n        }\n        e.dataTransfer.setData('text/plain', null);\n    }\n}\n\nexport function windowEntryDraggingOver(e) {\n    e.preventDefault();\n    let cursors = G.tabsList.getElementsByClassName(\"insert-cursor\");\n    for (let c of cursors) {\n        c.parentElement.removeChild(c);\n    }\n    let cursorWindow = G.tabsList.getElementByClassName(\"insert-cursor-window\");\n    if (cursorWindow !== null) {\n        cursorWindow.classList.remove(\"insert-cursor-window\");\n    }\n\n    let windowEntry;\n    if (e.target.classList.contains(\"tab-entry\")) {\n        let tabEntryBoundingClientRect = e.target.getBoundingClientRect();\n        targetTab = e.target;\n        under = false;\n        if ((e.clientY - tabEntryBoundingClientRect.top) >= tabEntryBoundingClientRect.height / 2) {\n            targetTab = targetTab.nextSibling;\n            if (targetTab === null) {\n                under = true;\n                targetTab = e.target;\n            }\n        }\n        if (tabDraggable(sourceTab, targetTab, under, sourceWindow)) {\n            let cursor = document.createElement(\"div\");\n            cursor.classList.add(\"insert-cursor\");\n            if (under) {\n                targetTab.parentElement.appendChild(cursor);\n            } else {\n                targetTab.parentElement.insertBefore(cursor, targetTab);\n            }\n        }\n    } else if ((windowEntry = e.target.parentElement) !== null) {\n        if (windowEntry.classList.contains(\"window-entry\")\n            && sourceWindow !== windowEntry\n            && !sourceTab.classList.contains(\"pinned-tab\")\n            && ((!sourceWindow.classList.contains(\"incognito-window\") && !windowEntry.classList.contains(\"incognito-window\"))\n            || (sourceWindow.classList.contains(\"incognito-window\") && windowEntry.classList.contains(\"incognito-window\")))) {\n            e.target.classList.add(\"insert-cursor-window\");\n        }\n    }\n}\n\nexport function windowEntryDropped(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    let cursors = G.tabsList.getElementsByClassName(\"insert-cursor\");\n    for (let cursor of cursors) {\n        cursor.parentElement.removeChild(cursor);\n    }\n    let cursorWindow = G.tabsList.getElementByClassName(\"insert-cursor-window\");\n    if (cursorWindow !== null) {\n        cursorWindow.classList.remove(\"insert-cursor-window\");\n    }\n    \n    if (e.target.classList.contains(\"tab-entry\")) {\n        if (!e.target.isSameNode(targetTab)) {\n            let tabEntryBoundingClientRect = e.target.getBoundingClientRect();\n            targetTab = e.target;\n            under = false;\n            if ((e.clientY - tabEntryBoundingClientRect.top) >= tabEntryBoundingClientRect.height / 2) {\n                targetTab = targetTab.nextSibling;\n                if (targetTab === null) {\n                    under = true;\n                    targetTab = e.target;\n                }\n            }\n        }\n        if (tabDraggable(sourceTab, targetTab, under, sourceWindow)) {\n            let destinationWindowId = parseInt(getWindowFromTab(targetTab).getAttribute(\"data-window_id\"));\n            let sourceTabIndex = Array.prototype.indexOf.call(targetTab.parentElement.childNodes, sourceTab);\n            let destinationIndex = Array.prototype.indexOf.call(targetTab.parentElement.childNodes, targetTab);\n            let moveIndex = under ? -1 : ((sourceTabIndex !== -1 && destinationIndex > sourceTabIndex && destinationWindowId === sourceWindowId) ? destinationIndex-1 : destinationIndex);\n            let sourceTabId = parseInt(sourceTab.getAttribute(\"data-tab_id\"));\n            browser.tabs.move(sourceTabId, {\n                windowId: destinationWindowId,\n                index: moveIndex\n            });\n            if (destinationWindowId === sourceWindowId) {\n                moveTab(sourceTabId, destinationWindowId, moveIndex);\n            } else {\n                attachTab(sourceTabId, sourceWindowId, destinationWindowId, moveIndex);\n            }\n        }\n    } else if ((windowEntry = e.target.parentElement) !== null) {\n        if (windowEntry.classList.contains(\"window-entry\")\n            && sourceWindow !== windowEntry\n            && !sourceTab.classList.contains(\"pinned-tab\")\n            && ((!sourceWindow.classList.contains(\"incognito-window\") && !windowEntry.classList.contains(\"incognito-window\"))\n            || (sourceWindow.classList.contains(\"incognito-window\") && windowEntry.classList.contains(\"incognito-window\")))) {\n            let sourceTabId = parseInt(sourceTab.getAttribute(\"data-tab_id\"));\n            let destinationWindowId = parseInt(windowEntry.getAttribute(\"data-window_id\"));\n            browser.tabs.move(sourceTabId, {\n                windowId: destinationWindowId,\n                index: -1\n            });\n            moveTab(sourceTabId, destinationWindowId, -1);\n        }\n    }\n}\n","const globals = {\n    tabsList: undefined,\n    archive: undefined,\n    isSelecting: false,\n    slideSelection: {\n        sliding: false,\n        initiator: undefined,\n        vector: 0\n    }\n};\nexport default globals;\n","let keyPressed = {};\nonkeydown = onkeyup = e => {\n    e = e || event;\n    keyPressed[e.code] = e.type == \"keydown\";\n};\n\n// Checks if either Ctrl(Windows & Linux) or Command(Mac) is pressed\nexport function ctrlOrCmd() {\n    if (window.navigator.platform.toUpperCase().indexOf(\"MAC\") >= 0) {\n        return keyPressed[\"OSRight\"] || keyPressed[\"OSLeft\"];\n    }\n    return keyPressed[\"ControlLeft\"] || keyPressed[\"ControlRight\"];\n}\n","// Function to send a message to the runtime\nexport function sendRuntimeMessage(type, data) {\n    return browser.runtime.sendMessage({\n        type: type,\n        ...data\n    });\n}\n\n// Function to send a message to a tab\nexport function sendTabMessage(tabId, target, data) {\n    return browser.tabs.sendMessage(tabId, {\n        target: target,\n        data: data\n    });\n}\n","// Function to get image from URL\nexport function getImage(url, noCache=false) {\n    return new Promise((resolve, reject) => {\n        try {\n            if (!url.startsWith(\"chrome://\")) {\n                let xhr = new XMLHttpRequest();\n                xhr.onreadystatechange = function(){\n                    if (this.readyState == 4 && this.status == 200) {\n                        let contentType = xhr.getResponseHeader(\"Content-Type\").trim();\n                        if (contentType.startsWith(\"image/\")) {\n                            let flag = \"data:\" + contentType + \";charset=utf-8;base64,\";\n                            let imageStr = arrayBufferToBase64(xhr.response);\n                            resolve(flag + imageStr);\n                        } else {\n                            reject(\"Image Request Failed: Content-Type is not an image! (Content-Type: \\\"\" + contentType + \"\\\")\");\n                        }\n                    }\n                };\n                xhr.responseType = \"arraybuffer\";\n                xhr.open(\"GET\", url, true);\n                if (noCache) { xhr.setRequestHeader(\"Cache-Control\", \"no-store\"); }\n                xhr.send();\n            } else {\n                resolve();\n            }\n        } catch (err) {\n            reject(err.message);\n        }\n    });\n}\n\n// Function to transform ArrayBuffer into a Base64 String\nexport function arrayBufferToBase64(buffer) {\n    let binary = \"\";\n    let bytes = [].slice.call(new Uint8Array(buffer));\n    bytes.forEach((b) => binary += String.fromCharCode(b));\n    return window.btoa(binary);\n}\n","import G from \"./globals\"\nimport { getWrongToRight } from \"./wrong-to-right\"\nimport { populateTabsList, extendTabsList } from \"./wtinit\"\nimport { documentMouseOver, documentMouseUp, documentClicked, documentDragOver } from \"./event-listeners/document\"\nimport { archiveDragOverReceiver, archiveDropReceiver } from \"./event-listeners/archive\"\nimport { searchTextChanged } from \"./event-listeners/search\"\nimport { onMessage } from \"./event-listeners/message\"\n\nG.tabsList = document.getElementById(\"tabs-list\");\n\nasync function main() {\n    // Make tabs list fit the panel\n    extendTabsList();\n    // Fix for cross-window dragging issue\n    await getWrongToRight();\n    // Populate tabs list with tabs\n    populateTabsList();\n}\n\n/* Add event listeners */\n\n// Starting point\nif (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", main);\n} else {\n    main();\n}\n\ndocument.addEventListener(\"mouseover\", documentMouseOver);\ndocument.addEventListener(\"mouseup\", documentMouseUp);\ndocument.addEventListener(\"click\", documentClicked);\ndocument.addEventListener(\"dragover\", documentDragOver);\n\n// Add keyup event listener and put focus on search\nlet search = document.getElementById(\"search\");\nsearch.addEventListener(\"keyup\", searchTextChanged);\nsearch.focus();\n\n// Add event listeners to all copy buttons\nfor (let copyBtn of document.getElementsByClassName(\"copy-button\")) {\n    copyBtn.addEventListener(\"click\", e => {\n        document.oncopy = ce => {\n            ce.clipboardData.setData(\"text\", document.getElementById(copyBtn.getAttribute(\"for\")).innerText);\n            ce.preventDefault();\n        };\n        document.execCommand(\"copy\", false, null);\n        copyBtn.innerText = \"Copied!\";\n        setTimeout(() => {\n            copyBtn.innerText = \"Copy\";\n        }, 2000);\n    });\n}\n\nG.archive = document.getElementById(\"save-for-later\");\nG.archive.addEventListener(\"dragover\", archiveDragOverReceiver);\nG.archive.addEventListener(\"drop\", archiveDropReceiver);\n\n// Add event listener to listen for any messages from background.js\nif (!browser.runtime.onMessage.hasListener(onMessage)) {\n    browser.runtime.onMessage.addListener(onMessage);\n}\n","import { sendRuntimeMessage } from \"./messaging\"\n\nlet wrongToRight;\n\nexport function getWrongToRight() {\n    return sendRuntimeMessage(\"WRONG_TO_RIGHT_GET\", {}).then(response => {\n        wrongToRight = response.wrongToRight;\n    });\n}\n\n// Function to get correct tab id\nexport function getCorrectTabId(tabId) {\n    return wrongToRight[tabId] || tabId;\n}\n","import G from \"./globals\"\nimport { getCorrectTabId } from \"./wrong-to-right\"\n\nexport function getTabByTabEntry(entry) {\n    return browser.tabs.get(parseInt(entry.getAttribute(\"data-tab_id\")));\n}\n\n// Find tab entry by tab id\nexport function findTabEntryById(tabId) {\n    return document.querySelector(\".tab-entry[data-tab_id=\\\"\" + tabId + \"\\\"]\");\n}\n\n// Find correct tab entry by tab id\nexport function findCorrectTabEntryById(tabId) {\n    return findTabEntryById(getCorrectTabId(tabId));\n}\n\n// Get favicon from a tab entry\nexport function getFavIconFromTabEntry(entry) {\n    return entry.getElementByClassName(\"tab-entry-favicon\");\n}\n\n// Find window entry by tab id\nexport function findWindowEntryById(windowId) {\n    return G.tabsList.querySelector(\"li[data-window_id=\\\"\" + windowId + \"\\\"]\");\n}\n\n// Find tab entry inside a window entry\nexport function findTabEntryInWindow(windowEntry, tabId) {\n    return windowEntry.querySelector(\"li[data-tab_id=\\\"\" + tabId + \"\\\"]\");\n}\n\n// Get active tab in the specified window\nexport function getActiveTab(windowId) {\n    let window = findWindowEntryById(windowId);\n    return window.getElementByClassName(\"current-tab\");\n}\n\n// Set active tab in the specified window\nexport function setActiveTab(windowId, tabId) {\n    let window = findWindowEntryById(windowId);\n    let tab = findTabEntryInWindow(window, tabId);\n    getActiveTab(windowId).classList.remove(\"current-tab\");\n    tab.classList.add(\"current-tab\");\n}\n\n// Remove tab\nexport function removeTab(tabId, windowId) {\n    let tabEntry = findTabEntryById(tabId);\n    tabEntry.parentElement.removeChild(tabEntry);\n    browser.tabs.query({\n        active: true,\n        windowId: windowId\n    }).then(tabs => {\n        findCorrectTabEntryById(tabs[0].id).classList.add(\"current-tab\");\n    });\n}\n\n// Move tab\nexport function moveTab(tabId, windowId, toIndex) {\n    let tab = findTabEntryById(tabId);\n    let tabsListDOM = findWindowEntryById(windowId).getElementByClassName(\"window-entry-tabs\");\n    tabsListDOM.removeChild(tab);\n    if (toIndex === -1) {\n        tabsListDOM.appendChild(tab);\n        return;\n    }\n    tabsListDOM.insertBefore(tab, tabsListDOM.childNodes[toIndex]);\n}\n\n// Attach tab\nexport function attachTab(tabId, from, to, toIndex) {\n    let tab = findTabEntryById(tabId);\n    let oldTabsListDOM = findWindowEntryById(from).getElementByClassName(\"window-entry-tabs\");\n    let newTabsListDOM = findWindowEntryById(to).getElementByClassName(\"window-entry-tabs\");\n    oldTabsListDOM.removeChild(tab);\n    if (toIndex === -1) {\n        newTabsListDOM.appendChild(tab);\n        return;\n    }\n    newTabsListDOM.insertBefore(tab, oldTabsListDOM.childNodes[toIndex]);\n}\n\n// Remove window\nexport function removeWindow(windowId) {\n    let windowEntry = findWindowEntryById(windowId);\n    windowEntry.parentElement.removeChild(windowEntry);\n    browser.windows.getCurrent({}).then(window => {\n        findWindowEntryById(window.id).classList.add(\"current-window\");\n    });\n}\n\nexport function getWindowFromTab(tab) {\n    return tab.parentElement.parentElement;\n}\n\n// Test if tab is draggable\nexport function tabDraggable(sourceTab, targetTab, under, sourceWindow) {\n    return sourceTab !== targetTab\n            && ((!sourceTab.classList.contains(\"pinned-tab\") && !targetTab.classList.contains(\"pinned-tab\"))\n            || (sourceTab.classList.contains(\"pinned-tab\") && targetTab.classList.contains(\"pinned-tab\"))\n            || (under && !sourceTab.classList.contains(\"pinned-tab\")))\n            && ((!sourceWindow.classList.contains(\"incognito-window\") && !getWindowFromTab(targetTab).classList.contains(\"incognito-window\"))\n            || (sourceWindow.classList.contains(\"incognito-window\") && getWindowFromTab(targetTab).classList.contains(\"incognito-window\")));\n}\n\nexport function tabEntryIndex(tabEntry) {\n    let tabs = document.getElementsByClassName(\"tab-entry\");\n    for (let i = 0; i < tabs.length; i++) {\n        if (tabs[i] === tabEntry) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/* Multiselect */\nlet selectedTabs = 0;\n// Select\nexport function multiSelect(element) {\n    if (!element.classList.contains(\"multiselect\")) {\n        selectedTabs++;\n        G.isSelecting = true;\n        element.classList.add(\"multiselect\");\n    }\n}\n// Cancel Selection\nexport function multiSelectCancel(element) {\n    if (element.classList.contains(\"multiselect\")) {\n        if (--selectedTabs == 0) {\n            G.isSelecting = false;\n        }\n        element.classList.remove(\"multiselect\");\n    }\n}\n// Toggle Selection\nexport function multiSelectToggle(element) {\n    if (element.classList.contains(\"multiselect\")) {\n        multiSelectCancel(element);\n    } else {\n        multiSelect(element);\n    }\n}\n// Reset slide selection\nexport function resetSlideSelection() {\n    G.slideSelection.sliding = false;\n    G.slideSelection.initiator = undefined;\n    G.slideSelection.vector = 0;\n}\n","import G from \"./globals\"\nimport { getImage } from \"./net\"\nimport { getCorrectTabId } from \"./wrong-to-right\"\nimport { getWindows } from \"./wtutils\"\nimport { getActualHeight } from \"./domutils\"\nimport { archiveDragStartReceiver } from \"./event-listeners/archive\"\nimport { windowEntryDragStarted, windowEntryDraggingOver, windowEntryDropped } from \"./event-listeners/windowEntry\"\n\n// Update tabs\nexport function updateTabs(windows) {\n    G.tabsList.innerHTML = \"\";\n    let tabsListFragment = document.createDocumentFragment();\n    let currentWindowEntry;\n    /* Predefined elements for faster performance */\n    // Window close button\n    let WINDOW_CLOSE_BTN = document.createElement(\"span\");\n    WINDOW_CLOSE_BTN.classList.add(\"inline-button\");\n    WINDOW_CLOSE_BTN.classList.add(\"img-button\");\n    WINDOW_CLOSE_BTN.classList.add(\"opacity-changing-button\");\n    WINDOW_CLOSE_BTN.classList.add(\"window-entry-remove-btn\");\n    WINDOW_CLOSE_BTN.style.backgroundImage = \"url(../icons/close.svg)\";\n    let DIV = document.createElement(\"div\");\n    DIV.style.display = \"inline-block\";\n    WINDOW_CLOSE_BTN.appendChild(DIV);\n    // Tab close button\n    let TAB_CLOSE_BTN = document.createElement(\"span\");\n    TAB_CLOSE_BTN.classList.add(\"inline-button\");\n    TAB_CLOSE_BTN.classList.add(\"red-button\");\n    TAB_CLOSE_BTN.classList.add(\"img-button\");\n    TAB_CLOSE_BTN.classList.add(\"tab-entry-remove-btn\");\n    TAB_CLOSE_BTN.style.backgroundImage = \"url(../icons/close.svg)\";\n    // Tab pin button\n    let TAB_PIN_BTN = document.createElement(\"span\");\n    TAB_PIN_BTN.classList.add(\"inline-button\");\n    TAB_PIN_BTN.classList.add(\"img-button\");\n    TAB_PIN_BTN.classList.add(\"opacity-changing-button\");\n    TAB_PIN_BTN.classList.add(\"tab-entry-pin-btn\");\n    TAB_PIN_BTN.style.backgroundImage = \"url(../icons/pin.svg)\";\n    // Loop through windows\n    for (let i = 0; i < windows.length; i++) {\n        // Set w to window\n        let w = windows[i];\n\n        // Create window entry\n        let windowEntry = document.createElement(\"li\");\n        windowEntry.classList.add(\"window-entry\");\n        windowEntry.classList.add(\"category\");\n\n        // Create window entry fragment\n        let windowEntryFragment = document.createDocumentFragment();\n\n        // Set window id to window entry\n        windowEntry.setAttribute(\"data-window_id\", w.id);\n        let span = document.createElement(\"span\");\n\n        // Create close button\n        let closeBtn = WINDOW_CLOSE_BTN.cloneNode(true);\n\n        // Buttons wrapper\n        let buttons = document.createElement(\"span\");\n        buttons.classList.add(\"window-entry-buttons\");\n        buttons.appendChild(closeBtn);\n        \n        // Create window name span\n        let windowName = document.createElement(\"span\");\n        windowName.classList.add(\"window-title\");\n        windowName.textContent += \"Window \" + (i+1);\n\n        // Check if window is focused\n        if (w.focused) {\n            currentWindowEntry = windowEntry;\n            windowEntry.classList.add(\"current-window\");\n            windowName.textContent += \" - Current\";\n        }\n        // Check if window is incognito\n        if (w.incognito) {\n            windowEntry.classList.add(\"incognito-window\");\n            windowName.textContent += \" (Incognito)\";\n        }\n\n        span.appendChild(windowName);\n        span.appendChild(buttons);\n\n        span.classList.add(\"darker-button\");\n\n        windowEntryFragment.appendChild(span);\n\n        // Add window entry dragstart, dragover, and drop event listeners\n        windowEntry.addEventListener(\"dragstart\", windowEntryDragStarted);\n        windowEntry.addEventListener(\"dragover\", windowEntryDraggingOver);\n        windowEntry.addEventListener(\"drop\", windowEntryDropped);\n        windowEntry.setAttribute(\"draggable\", \"true\");\n\n        // Add window button dragstart, dragover, and drop event listeners\n        windowEntry.addEventListener(\"dragstart\", archiveDragStartReceiver);\n\n        let windowTabsList = document.createElement(\"ul\");\n        windowTabsList.classList.add(\"category-list\");\n        windowTabsList.classList.add(\"window-entry-tabs\");\n\n        let windowTabsListFragment = document.createDocumentFragment();\n        // Loop through tabs\n        for (let tab of w.tabs) {\n            // Check tab id\n            if (tab.id !== browser.tabs.TAB_ID_NONE) {\n                // Create tab entry\n                let tabEntry = document.createElement(\"li\");\n                tabEntry.classList.add(\"tab-entry\");\n                tabEntry.classList.add(\"button\");\n                // Set tab entry as draggable. Required to enable move tab feature\n                tabEntry.setAttribute(\"draggable\", \"true\");\n\n                // Create tab entry fragment\n                let tabEntryFragment = document.createDocumentFragment();\n\n                let favicon;\n                let title = document.createElement(\"span\");\n                title.classList.add(\"tab-title\");\n                title.textContent += tab.title;\n                let titleWrapper = document.createElement(\"div\");\n                titleWrapper.classList.add(\"tab-title-wrapper\");\n                titleWrapper.appendChild(title);\n\n                if (tab.active) {\n                    tabEntry.classList.add(\"current-tab\");\n                }\n                if (tab.favIconUrl) {\n                    favicon = document.createElement(\"img\");\n                    favicon.classList.add(\"tab-entry-favicon\");\n                    let favIconPromise;\n                    if (w.incognito) {\n                        favIconPromise = getImage(tab.favIconUrl, true);\n                    } else {\n                        favIconPromise = getImage(tab.favIconUrl);\n                    }\n                    favIconPromise.then(base64Image => {\n                        favicon.src = base64Image;\n                    });\n                }\n\n                // Create close button\n                let closeBtn = TAB_CLOSE_BTN.cloneNode(false);\n\n                // Create pin button\n                let pinBtn = TAB_PIN_BTN.cloneNode(false);\n\n                // Buttons wrapper\n                let buttons = document.createElement(\"span\");\n                buttons.classList.add(\"tab-entry-buttons\");\n                buttons.appendChild(pinBtn);\n                buttons.appendChild(closeBtn);\n\n                // Set tab entry tab id\n                tabEntry.setAttribute(\"data-tab_id\", getCorrectTabId(tab.id));\n                if (favicon !== undefined) {\n                    tabEntryFragment.appendChild(favicon);\n                } else {\n                    tabEntry.classList.add(\"noicon\");\n                }\n                tabEntryFragment.appendChild(titleWrapper);\n                tabEntryFragment.appendChild(buttons);\n                \n                tabEntry.appendChild(tabEntryFragment);\n\n                if (tab.pinned) {\n                    pinBtn.style.backgroundImage = \"url(../icons/pinremove.svg)\";\n                    tabEntry.classList.add(\"pinned-tab\");\n                    let pinnedTabs = windowTabsList.getElementsByClassName(\"pinned-tab\");\n                    let lastPinnedTab = pinnedTabs[pinnedTabs.length-1];\n                    if (lastPinnedTab !== undefined) {\n                        windowTabsListFragment.insertBefore(tabEntry, lastPinnedTab.nextSibling);\n                    } else {\n                        windowTabsListFragment.insertBefore(tabEntry, windowTabsList.childNodes[0]);\n                    }\n                } else {\n                    windowTabsListFragment.appendChild(tabEntry);\n                }\n            }\n        }\n\n        // Append fragment to actual windowTabsList\n        windowTabsList.appendChild(windowTabsListFragment);\n\n        windowEntryFragment.appendChild(windowTabsList);\n        windowEntry.appendChild(windowEntryFragment);\n        tabsListFragment.appendChild(windowEntry);\n    }\n    G.tabsList.appendChild(tabsListFragment);\n    document.getElementById(\"tabs\").style.display = \"block\";\n    currentWindowEntry.scrollIntoView({ behavior: 'smooth' });\n}\n\n// Add tabs to list\nexport function populateTabsList() {\n    getWindows().then(windows => {\n        updateTabs(windows);\n    });\n}\n\n// Set tabs list height to any available height\nexport function extendTabsList() {\n    let searchArea = document.getElementById(\"search-area\");\n    let searchAreaHeight = getActualHeight(searchArea);\n    let tabs = document.getElementById(\"tabs\");\n    tabs.style.height = \"calc(100% - \" + searchAreaHeight + \"px)\";\n}\n","// Get all windows\nexport function getWindows() {\n    return browser.windows.getAll({\n        populate: true,\n        windowTypes: [\"normal\", \"popup\", \"devtools\"]\n    });\n}\n\n// Get current window\nexport function getCurrentWindow() {\n    return browser.windows.getLastFocused({});\n}\n"],"sourceRoot":""}